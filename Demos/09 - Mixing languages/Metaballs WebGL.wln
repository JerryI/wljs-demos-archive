<|"Notebook" -> <|"Controller" -> "cdf269df-29d4-47a1-aaa9-092ee5fc4755", 
   "FocusedCell" -> CoffeeLiqueur`Notebook`Cells`CellObj[
     CoffeeLiqueur`Notebook`Cells`CellObj`$4387], 
   "MessangerChannel" -> Messanger, "ModalsChannel" -> 
    "e72aee0e-377b-40e3-8cef-981c2f7f358c", "Objects" -> <||>, 
   "Path" -> "/Users/kirill/Github/wljs-demos-archive/Demos/09 - Mixing \
languages/Metaballs WebGL.wln", "ReadOnly" -> True, 
   "TOC" -> {CoffeeLiqueur`Extensions`TOC`Private`heading[1, 
      "WebGL Metaballs example", CoffeeLiqueur`Notebook`Cells`CellObj[
       CoffeeLiqueur`Notebook`Cells`CellObj`$4393]]}|>, 
 "Cells" -> {<|"Data" -> ".md\n# WebGL Metaballs example\nA demonstration on \
how WebGL can interact with WL Kernel using event-based system.", 
    "Display" -> "codemirror", "Hash" -> 
     "656588d7-4964-4204-a655-5312ee037c38", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "f07a1fdd-b610-4379-9680-26cbd8830d2b"|>, 
   <|"Data" -> "# WebGL Metaballs example\nA demonstration on how WebGL can \
interact with WL Kernel using event-based system.", "Display" -> "markdown", 
    "Hash" -> "9a928eb9-ed75-47ad-a4c8-b372be87426d", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "f07a1fdd-b610-4379-9680-26cbd8830d2b"|>, 
   <|"Data" -> ".md\nEverything goes asynchronous, therefore, you can still \
operate with the cells. \n\nLet's define some basic 3-bodies system", 
    "Display" -> "codemirror", "Hash" -> 
     "1f97cdc2-30b2-470f-b150-132fb88507bf", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "f07a1fdd-b610-4379-9680-26cbd8830d2b"|>, 
   <|"Data" -> "\nEverything goes asynchronous, therefore, you can still \
operate with the cells. \n\nLet's define some basic 3-bodies system", 
    "Display" -> "markdown", "Hash" -> 
     "fb4cab66-bc99-40cf-a586-8d32421d193a", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> False|>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "f07a1fdd-b610-4379-9680-26cbd8830d2b"|>, 
   <|"Data" -> "bodies  = NBodySimulation[\n  \"InverseSquare\", {\n  \
<|\"Mass\" -> 1, \"Position\" -> {0, 2}, \"Velocity\" -> {0, .5}|>,\n  \
<|\"Mass\" -> 1, \"Position\" -> {3, 0.4}, \"Velocity\" -> {+0.01, -.5}|>,\n  \
<|\"Mass\" -> 1, \"Position\" -> {-1.1, 0.4}, \"Velocity\" -> {-2.11, \
-.5}|>}, 1];", "Display" -> "codemirror", 
    "Hash" -> "be64ae4b-69ad-4b45-8018-168f0c8f9285", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> False, "init" -> True|>, 
    "State" -> "Idle", "Type" -> "Input", "UID" -> Null, 
    "Notebook" -> "f07a1fdd-b610-4379-9680-26cbd8830d2b"|>, 
   <|"Data" -> ".md\nThen define some parameters and create an `EventObject` \
to be used for the interconnection with JS", "Display" -> "codemirror", 
    "Hash" -> "6d979db6-fe9f-4d45-910a-1d211aad5b8a", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "f07a1fdd-b610-4379-9680-26cbd8830d2b"|>, 
   <|"Data" -> "\nThen define some parameters and create an `EventObject` to \
be used for the interconnection with JS", "Display" -> "markdown", 
    "Hash" -> "c96887a2-0eba-46af-ab42-bfe97c7b50f9", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> False|>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "f07a1fdd-b610-4379-9680-26cbd8830d2b"|>, 
   <|"Data" -> "width = 500;\nheight = 500;\nt = 0;\n\ngetScaled[t_] := \
Module[{max,min, pos = bodies[All, \"Position\", t]},\n  max = 1.5 \
Max[pos//Flatten] {1,1};\n  min = 1.5 Min[pos//Flatten] {1,1};\n\n  ( {width, \
height}  (# - min) / (max - min))& /@ pos\n];\nupdate = \
\"reCompute\";\nupdate", "Display" -> "codemirror", 
    "Hash" -> "41c5f6d0-8dab-4fa5-a8af-425bb8a42b23", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> False, "init" -> True|>, 
    "State" -> "Idle", "Type" -> "Input", "UID" -> Null, 
    "Notebook" -> "f07a1fdd-b610-4379-9680-26cbd8830d2b"|>, 
   <|"Data" -> "\"reCompute\"", "Display" -> "codemirror", 
    "Hash" -> "34df3bab-ce85-4044-b469-2d3f9cfadbc6", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "f07a1fdd-b610-4379-9680-26cbd8830d2b"|>, 
   <|"Data" -> ".md\nNow JS part comes with some basic shaders, which returns \
a DOM element", "Display" -> "codemirror", 
    "Hash" -> "36209eb8-d36d-44d6-b0f1-ad77c4386a96", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "f07a1fdd-b610-4379-9680-26cbd8830d2b"|>, 
   <|"Data" -> 
     "\nNow JS part comes with some basic shaders, which returns a DOM \
element", "Display" -> "markdown", "Hash" -> 
     "5d475cbd-a6f8-48a7-be2e-d248d6d925a2", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> False|>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "f07a1fdd-b610-4379-9680-26cbd8830d2b"|>, 
   <|"Data" -> ".js\nconst canvas = document.createElement('canvas');\nvar gl \
= canvas.getContext(\"webgl\", {depth: false});\n\nvar height = 500;\nvar \
width = 500;\n\ncanvas.width = width;\ncanvas.height = height;\n\nvar \
fragmentShader;\n\n{\n  const shader = gl.createShader(gl.FRAGMENT_SHADER);\n \
 gl.shaderSource(shader, `\nprecision highp float;\nuniform vec2 \
u_ball1;\nuniform vec2 u_ball2;\nuniform vec2 u_ball3;\n\nconst float PI = \
3.14159265359;\n\n// https://github.com/d3/d3-color\nvec3 cubehelix(vec3 c) \
{\n  float a = c.y * c.z * (1.0 - c.z);\n  float cosh = cos(c.x + PI / \
2.0);\n  float sinh = sin(c.x + PI / 2.0);\n  return vec3(\n    (c.z + a * \
(1.78277 * sinh - 0.14861 * cosh)),\n    (c.z - a * (0.29227 * cosh + 0.90649 \
* sinh)),\n    (c.z + a * (1.97294 * cosh))\n  );\n}\n\n// \
https://github.com/d3/d3-scale-chromatic\nvec3 cubehelixDefault(float t) {\n  \
return cubehelix(vec3(mix(300.0 / 180.0 * PI, -240.0 / 180.0 * PI, t), 0.5, \
t));\n}\n\nvoid main(void) {\n  float f = 1.0 / (distance(gl_FragCoord.xy, \
u_ball1)) + 1.0 / (distance(gl_FragCoord.xy, u_ball2)) + 1.0 / \
(distance(gl_FragCoord.xy, u_ball3));\n  float t = smoothstep(0.0, 1.0, (0.04 \
- f) / 0.04);\n  gl_FragColor = vec4(cubehelixDefault(t), 1.0);\n}\n`);\n  \
gl.compileShader(shader);\n  fragmentShader= shader;\n\n}\n\nvar \
vertexShader;\n\n{\n  const shader = gl.createShader(gl.VERTEX_SHADER);\n  \
gl.shaderSource(shader, `\nattribute vec2 a_corner;\nvoid main(void) {\n  \
gl_Position = vec4(a_corner, 0.0, 1.0);\n}\n`);\n  \
gl.compileShader(shader);\n   vertexShader = shader;\n  \n}\n\nvar \
program;\n{\n  const program0 = gl.createProgram();\n  \
gl.attachShader(program0, vertexShader);\n  gl.attachShader(program0, \
fragmentShader);\n  gl.linkProgram(program0);\n   program = program0;\n \
\n};\n\nvar cornerBuffer;\n\n{\n  const buffer = gl.createBuffer();\n  \
gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n  gl.bufferData(gl.ARRAY_BUFFER, \
Float32Array.of(-1, -1, +1, -1, +1, +1, -1, +1), gl.STATIC_DRAW);\n  \
cornerBuffer = buffer;\n}\n\nvar a_corner = gl.getAttribLocation(program, \
\"a_corner\")\nvar u_ball1 = gl.getUniformLocation(program, \"u_ball1\")\nvar \
u_ball2 = gl.getUniformLocation(program, \"u_ball2\")\nvar u_ball3 = \
gl.getUniformLocation(program, \"u_ball3\")\n\ngl.viewport(0, 0, width, \
height);\ngl.useProgram(program);\ngl.enableVertexAttribArray(a_corner);\ngl.\
vertexAttribPointer(a_corner, 2, gl.FLOAT, false, 0, 0);\n\n//Frontend \
function, which is called by the Wolfram kernel\ncore.UpdateCanvas = async \
function(args, env) {\n  const coords = await interpretate(args[0], env);\n  \
gl.uniform2f(\n    u_ball1,\n    coords[0][0],\n    coords[0][1]\n  );\n  \
gl.uniform2f(\n    u_ball2,\n    coords[1][0],\n    coords[1][1]\n  );\n  \
gl.uniform2f(\n    u_ball3,\n    coords[2][0],\n    coords[2][1]\n  );\n  \
gl.drawArrays(gl.TRIANGLE_FAN, 0, 4);  \n\n  \
requestAnimationFrame(animate);\n}\n\nfunction animate() {\n  \
server.kernel.io.fire('reCompute', true);\n}\n\nconst uid = \
requestAnimationFrame(animate);\nthis.ondestroy = function() \
{cancelAnimationFrame(uid)};\n\nreturn canvas;", "Display" -> "codemirror", 
    "Hash" -> "cb62447a-05cf-41ce-b7f7-b16c498037d1", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> False, "init" -> True, 
      "Fade" -> True|>, "State" -> "Idle", "Type" -> "Input", "UID" -> Null, 
    "Notebook" -> "f07a1fdd-b610-4379-9680-26cbd8830d2b"|>, 
   <|"Data" -> ".md\nStop the simulation", "Display" -> "codemirror", 
    "Hash" -> "c481f983-5bf9-4ee9-a4e1-fdd0d4d668bb", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "f07a1fdd-b610-4379-9680-26cbd8830d2b"|>, 
   <|"Data" -> "\nStop the simulation", "Display" -> "markdown", 
    "Hash" -> "39613a83-3eae-4c4a-8531-337b9482a3ff", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> False|>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "f07a1fdd-b610-4379-9680-26cbd8830d2b"|>, 
   <|"Data" -> "EventRemove[update]; ", "Display" -> "codemirror", 
    "Hash" -> "d1a4e6e5-4a8f-43c2-b4e0-95f0cbc38c11", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> False|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "f07a1fdd-b610-4379-9680-26cbd8830d2b"|>, 
   <|"Data" -> ".md\nStart the simulation", "Display" -> "codemirror", 
    "Hash" -> "6a850914-ee47-42ca-9783-33689fc57f59", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "f07a1fdd-b610-4379-9680-26cbd8830d2b"|>, 
   <|"Data" -> "\nStart the simulation", "Display" -> "markdown", 
    "Hash" -> "287e42dd-7aaa-4d8d-97a0-cd152404ce54", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> False|>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "f07a1fdd-b610-4379-9680-26cbd8830d2b"|>, 
   <|"Data" -> "With[{},\n  EventHandler[update, Function[data,\n \n    \
FrontSubmit[UpdateCanvas[getScaled[t]]];\n    t = t + 0.01;\n    If[t > 1.0, \
t = 0;\n      (* regenerate it! *)\n      bodies  = NBodySimulation[\n        \
\"InverseSquare\", {\n        <|\"Mass\" -> 1, \"Position\" -> \
RandomReal[{-3,3},2], \"Velocity\" -> RandomReal[{-3,3},2]|>,\n        \
<|\"Mass\" -> 1, \"Position\" -> RandomReal[{-3,3},2], \"Velocity\" -> \
RandomReal[{-3,3},2]|>,\n        <|\"Mass\" -> 1, \"Position\" -> \
RandomReal[{-3,3},2], \"Velocity\" -> RandomReal[{-3,3},2]|>}, 1]  \n    ];\n \
 ]];\n];\n\n(* kickstarter *)\nFrontSubmit[UpdateCanvas[getScaled[t]]]", 
    "Display" -> "codemirror", "Hash" -> 
     "69540f0f-7f6b-40d1-9a21-7c2fe8407589", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> False, "init" -> True|>, 
    "State" -> "Idle", "Type" -> "Input", "UID" -> Null, 
    "Notebook" -> "f07a1fdd-b610-4379-9680-26cbd8830d2b"|>, 
   <|"Data" -> "0", "Display" -> "codemirror", 
    "Hash" -> "7c8ba510-7bec-4171-b3c5-d06bbaa452c7", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "f07a1fdd-b610-4379-9680-26cbd8830d2b"|>}, "serializer" -> "jsfn4"|>
