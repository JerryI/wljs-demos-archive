<|"Notebook" -> <|"Controller" -> "894496cd-f631-4932-bdf1-71e6efdd6808", 
   "FocusedCell" -> CoffeeLiqueur`Notebook`Cells`CellObj[
     CoffeeLiqueur`Notebook`Cells`CellObj`$122], 
   "MessangerChannel" -> Messanger, "ModalsChannel" -> 
    "a8b82a60-a945-4c43-b11d-34c024674bd5", 
   "Objects" -> <|"7c5e665c-8f71-414d-9f17-b7d0ced06b89" -> 
      <|"Public" -> Hold[MyFunction[Offload[board]]]|>|>, 
   "Path" -> "/Users/kirill/Github/wljs-demos-archive/Demos/12 - Frontend \
interpreter/GOL Containers.wln", "ReadOnly" -> True, 
   "Symbols" -> <|"board" -> JSObject[0[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
         0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
         0, 0, 0, 0][0[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
         1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
        0[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 
         0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
        0[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 
         0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], 
        0[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 
         0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], 
        0[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 
         0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
        0[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 
         0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0], 
        0[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 
         0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], 
        0[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 
         0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], 
        0[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 
         0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], 
        0[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 
         0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0], 
        0[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 
         0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], 
        0[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
        0[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 
         0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
        0[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 
         0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
        0[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 
         0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
        0[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 
         0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
        0[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 
         0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
        1[0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
         0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
        1[0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 
         0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
        0[1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 
         0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
        0[0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 
         1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], 
        0[0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 
         1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
        1[0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 
         0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], 
        0[0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], 
        0[1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], 
        1[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], 
        0[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0], 
        0[0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0], 
        0[0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
         1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
        0[0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 
         0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
        0[0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 
         1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], 
        0[0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0], 
        0[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0], 
        0[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], 
        0[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
         0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
        0[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
         0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
        0[1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
        1[0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
        0[1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]]|>, 
   "TOC" -> {CoffeeLiqueur`Extensions`TOC`Private`heading[1, 
      "GOL: Example with containers", CoffeeLiqueur`Notebook`Cells`CellObj[
       CoffeeLiqueur`Notebook`Cells`CellObj`$113]]}|>, 
 "Cells" -> {<|"Data" -> ".md\n# GOL: Example with containers\nUsing the \
advanced frontend functions definition", "Display" -> "codemirror", 
    "Hash" -> "6400a734-75ed-48c1-a1d1-6cfacc1dd814", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "06890664-f936-4d32-b1a0-edeb81a4adbe"|>, 
   <|"Data" -> "\n# GOL: Example with containers\nUsing the advanced frontend \
functions definition", "Display" -> "markdown", 
    "Hash" -> "b49044e7-d02f-41d4-b923-fcc78424b001", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> False|>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "06890664-f936-4d32-b1a0-edeb81a4adbe"|>, 
   <|"Data" -> ".js\n\n//constructor\ncore.MyFunction = async (args, env) => \
{\n  //just to make second object to be aware of the previous one\n  let data \
= await interpretate(args[0], env);\n  if (data instanceof \
NumericArrayObject) {\n    data = data.normal();\n  }\n  //create js canvas\n \
 const canvas = document.createElement(\"canvas\");\n  canvas.width = 400;\n  \
canvas.height = 400;\n\n  let context = canvas.getContext(\"2d\");\n  \
context.fillStyle = \"lightgray\";\n  context.fillRect(0, 0, 500, 500);\n\n  \
//an array to store the previous state\n  let old = new Array(40);\n  for \
(let i = 0; i < old.length; i++) {\n    old[i] = new Array(40).fill(0); \n  \
}\n\n  env.element.appendChild(canvas);\n  env.local.old = old;\n  \
env.local.ctx = context;\n}\n\n//on update\ncore.MyFunction.update = async \
(args, env) => {\n  let data = await interpretate(args[0], env);\n  if (data \
instanceof NumericArrayObject) {\n    data = data.normal();\n  }\n  \n  const \
context = env.local.ctx;\n  //draw our boxes\n  for(let i=0; i<40; ++i) {\n   \
 for (let j=0; j<40; ++j) {\n      //old pixels will leave blue traces\n      \
if (env.local.old[i][j] > 0) {\n        context.fillStyle = \
\"rgba(0,0,255,0.2)\"; \n        context.fillRect(i*10 + 2, j*10 + 2, 6, \
6);\n      }\n      //new pixels\n      if (data[i][j] > 0) {\n        \
context.fillStyle = \"rgba(255,0,0,0.4)\"; \n        context.fillRect(i*10 + \
1, j*10 + 1, 8, 8);\n      } else {\n        context.fillStyle = \
\"rgba(255,255,255,0.4)\"; \n        context.fillRect(i*10 + 1, j*10 + 1, 8, \
8);\n      }\n    }\n  }\n\n  env.local.old = \
data;\n}\n\ncore.MyFunction.destroy = (args, env) => \
{}\n\ncore.MyFunction.virtual = true\n\nreturn null;", 
    "Display" -> "codemirror", "Hash" -> 
     "3b6e3414-d93e-49e9-a716-d46b02cdfd04", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> False|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "06890664-f936-4d32-b1a0-edeb81a4adbe"|>, 
   <|"Data" -> "\n//constructor\ncore.MyFunction = async (args, env) => {\n  \
//just to make second object to be aware of the previous one\n  let data = \
await interpretate(args[0], env);\n  if (data instanceof NumericArrayObject) \
{\n    data = data.normal();\n  }\n  //create js canvas\n  const canvas = \
document.createElement(\"canvas\");\n  canvas.width = 400;\n  canvas.height = \
400;\n\n  let context = canvas.getContext(\"2d\");\n  context.fillStyle = \
\"lightgray\";\n  context.fillRect(0, 0, 500, 500);\n\n  //an array to store \
the previous state\n  let old = new Array(40);\n  for (let i = 0; i < \
old.length; i++) {\n    old[i] = new Array(40).fill(0); \n  }\n\n  \
env.element.appendChild(canvas);\n  env.local.old = old;\n  env.local.ctx = \
context;\n}\n\n//on update\ncore.MyFunction.update = async (args, env) => {\n \
 let data = await interpretate(args[0], env);\n  if (data instanceof \
NumericArrayObject) {\n    data = data.normal();\n  }\n  \n  const context = \
env.local.ctx;\n  //draw our boxes\n  for(let i=0; i<40; ++i) {\n    for (let \
j=0; j<40; ++j) {\n      //old pixels will leave blue traces\n      if \
(env.local.old[i][j] > 0) {\n        context.fillStyle = \
\"rgba(0,0,255,0.2)\"; \n        context.fillRect(i*10 + 2, j*10 + 2, 6, \
6);\n      }\n      //new pixels\n      if (data[i][j] > 0) {\n        \
context.fillStyle = \"rgba(255,0,0,0.4)\"; \n        context.fillRect(i*10 + \
1, j*10 + 1, 8, 8);\n      } else {\n        context.fillStyle = \
\"rgba(255,255,255,0.4)\"; \n        context.fillRect(i*10 + 1, j*10 + 1, 8, \
8);\n      }\n    }\n  }\n\n  env.local.old = \
data;\n}\n\ncore.MyFunction.destroy = (args, env) => \
{}\n\ncore.MyFunction.virtual = true\n\nreturn null;", "Display" -> "js", 
    "Hash" -> "9da3c365-7bb0-4b45-a547-612c032e5e83", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "06890664-f936-4d32-b1a0-edeb81a4adbe"|>, 
   <|"Data" -> ".md\nWolfram Mathematica code", "Display" -> "codemirror", 
    "Hash" -> "c7de314d-11ef-4c7b-be6d-62fef58065a8", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "06890664-f936-4d32-b1a0-edeb81a4adbe"|>, 
   <|"Data" -> "\nWolfram Mathematica code", "Display" -> "markdown", 
    "Hash" -> "997668e2-f4f6-4f84-8bc5-1baa3e972e50", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> False|>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "06890664-f936-4d32-b1a0-edeb81a4adbe"|>, 
   <|"Data" -> "gameOfLife = {224, {2, {{2, 2, 2}, {2, 1, 2}, {2, 2, 2}}}, \
{1, 1}};\nboard = RandomInteger[1, {40, \
40}];\n\nCreateFrontEndObject[MyFunction[board // Offload]]", 
    "Display" -> "codemirror", "Hash" -> 
     "05c313ea-73f2-484b-8311-4b469d91bb38", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> False|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "06890664-f936-4d32-b1a0-edeb81a4adbe"|>, 
   <|"Data" -> "(*VB[*)(FrontEndRef[\"7c5e665c-8f71-414d-9f17-b7d0ced06b89\"]\
)(*,*)(*\"1:eJxTTMoPSmNkYGAoZgESHvk5KRCeEJBwK8rPK3HNS3GtSE0uLUlMykkNVgEKmyebp\
pqZmSbrWqSZG+qaGJqk6FqmGZrrJpmnGCSnphiYJVlYAgCDTBW3\"*)(*]VB*)", 
    "Display" -> "codemirror", "Hash" -> 
     "3e56c4b9-9567-415e-bff5-eb124a723735", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "06890664-f936-4d32-b1a0-edeb81a4adbe"|>, 
   <|"Data" -> ".md\nPerform an update", "Display" -> "codemirror", 
    "Hash" -> "dd79d0a0-8267-44dc-ba47-5815dfdee6b4", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "06890664-f936-4d32-b1a0-edeb81a4adbe"|>, 
   <|"Data" -> "\nPerform an update", "Display" -> "markdown", 
    "Hash" -> "4cba2754-406e-4bbf-8726-69082e63d3bd", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> False|>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "06890664-f936-4d32-b1a0-edeb81a4adbe"|>, 
   <|"Data" -> "\nDo[\n  board = CellularAutomaton[gameOfLife, board, {{0, \
1}}] // Last;\n  Pause[0.03];\n, {i,1,100}]", "Display" -> "codemirror", 
    "Hash" -> "1e6b547c-df3f-4809-b90b-e3faa977d0cf", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> False|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "06890664-f936-4d32-b1a0-edeb81a4adbe"|>}, "serializer" -> "jsfn4"|>
