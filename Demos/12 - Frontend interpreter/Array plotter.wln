<|"Notebook" -> <|"Controller" -> "082bf5c9-8426-469d-85bb-a9bd5c251d53", 
   "FocusedCell" -> CoffeeLiqueur`Notebook`Cells`CellObj[
     CoffeeLiqueur`Notebook`Cells`CellObj`$68], "MessangerChannel" -> 
    Messanger, "ModalsChannel" -> "c2bd96fd-d1d7-45a8-9bdb-bf885c08abcb", 
   "Objects" -> <|"626198af-e4dc-4b40-8660-ca52546dda1c" -> 
      <|"Public" -> Hold[ArrayDraw[{{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 
            0, 0, 1, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 
            1, 0, 1, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
            1, 1, 0, 0}, {0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 
            0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 
            0, 0}, {1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 
            0}, {1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0}, 
           {1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0}, 
           {0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1}, 
           {1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0}, 
           {1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1}, 
           {0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 
           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0}, 
           {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 
           {0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1}, 
           {0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1}, 
           {0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1}, 
           {0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0}, 
           {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1}}]]|>, 
     "b0641dff-d96f-4317-a329-3bd99544f69c" -> 
      <|"Public" -> Hold[ArrayDraw[Offload[sboard]]]|>|>, 
   "Path" -> "/Users/kirill/Github/wljs-demos-archive/Demos/12 - Frontend \
interpreter/Array plotter.wln", "ReadOnly" -> True, 
   "Symbols" -> <|"sboard" -> JSObject[0[0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 
         0, 0, 0, 0, 0, 0, 0][0[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 
         0, 0, 0, 0], 0[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 
         0], 0[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0], 
        0[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0], 
        0[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0], 
        0[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], 
        0[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0], 
        0[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], 
        0[0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0], 
        0[0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0], 
        0[0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], 
        0[0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0], 
        0[0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0], 
        0[0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
        0[0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
        0[0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
        0[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0], 
        0[1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
        0[1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]]]|>, 
   "TOC" -> {CoffeeLiqueur`Extensions`TOC`Private`heading[1, 
      "Frontend functions", CoffeeLiqueur`Notebook`Cells`CellObj[
       CoffeeLiqueur`Notebook`Cells`CellObj`$35]], 
     CoffeeLiqueur`Extensions`TOC`Private`heading[2, 
      "Animated array plotter", CoffeeLiqueur`Notebook`Cells`CellObj[
       CoffeeLiqueur`Notebook`Cells`CellObj`$35]], 
     CoffeeLiqueur`Extensions`TOC`Private`heading[2, "Cleanning up method", 
      CoffeeLiqueur`Notebook`Cells`CellObj[
       CoffeeLiqueur`Notebook`Cells`CellObj`$43]], 
     CoffeeLiqueur`Extensions`TOC`Private`heading[2, "Update method", 
      CoffeeLiqueur`Notebook`Cells`CellObj[
       CoffeeLiqueur`Notebook`Cells`CellObj`$50]], 
     CoffeeLiqueur`Extensions`TOC`Private`heading[3, "Animation", 
      CoffeeLiqueur`Notebook`Cells`CellObj[
       CoffeeLiqueur`Notebook`Cells`CellObj`$64]]}|>, 
 "Cells" -> {<|"Data" -> ".md\n# Frontend functions\n## Animated array \
plotter\nIn this small session we will show how to write our own raw function \
for the frontend, that allows to visualize an array of data in a unique \
way.\n\n<br/>\n\nIt is important to note, that here it does not rely on \
`Graphics` object or anyhting else. Just a plain HTML and Javascript coupled \
to Wolfram Language.\n\n<br/>\n\nThis __will be the fastest way of handling \
the data from WL to a browser's screen__. Most in-build components are made \
in this way.", "Display" -> "codemirror", 
    "Hash" -> "98088845-fb2e-493c-8d9b-13428de4d43d", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "ef2a4980-efc9-4205-8a1c-b287ab9da933"|>, 
   <|"Data" -> "\n# Frontend functions\n## Animated array plotter\nIn this \
small session we will show how to write our own raw function for the \
frontend, that allows to visualize an array of data in a unique \
way.\n\n<br/>\n\nIt is important to note, that here it does not rely on \
`Graphics` object or anyhting else. Just a plain HTML and Javascript coupled \
to Wolfram Language.\n\n<br/>\n\nThis __will be the fastest way of handling \
the data from WL to a browser's screen__. Most in-build components are made \
in this way.", "Display" -> "markdown", 
    "Hash" -> "6844e881-63e8-48b6-95af-d83751efdc85", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> False|>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "ef2a4980-efc9-4205-8a1c-b287ab9da933"|>, 
   <|"Data" -> ".md\nLet's sketch a plan!\n1. The size of an array is \
determined in a runtime.\n2. It should use `canvas` element of HTML5.\n3. It \
will be animated independently from the incomming data with a nice fading \
effect.\n4. It should be synced to the framerate of the browser.\n\nIt sound \
complicated, however using a modern Javascript thing are going much easier", 
    "Display" -> "codemirror", "Hash" -> 
     "7306179e-c7bd-4911-8012-f26e29411f81", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "ef2a4980-efc9-4205-8a1c-b287ab9da933"|>, 
   <|"Data" -> "\nLet's sketch a plan!\n1. The size of an array is determined \
in a runtime.\n2. It should use `canvas` element of HTML5.\n3. It will be \
animated independently from the incomming data with a nice fading effect.\n4. \
It should be synced to the framerate of the browser.\n\nIt sound complicated, \
however using a modern Javascript thing are going much easier", 
    "Display" -> "markdown", "Hash" -> 
     "40a65a1b-8e3f-4358-aa70-22b29d04c7ce", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> False|>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "ef2a4980-efc9-4205-8a1c-b287ab9da933"|>, 
   <|"Data" -> ".js\ncore.ArrayDraw = async (args, env) => {\n  const canvas \
= document.createElement('canvas');\n  \n  //fixed, but one can use \
core._getRules(args, env) to derive the ImageSize option\n  canvas.width = \
300;\n  canvas.height = 300;\n  \n  //append our canvas to the provided DOM \
element\n  env.element.appendChild(canvas);\n  \n  let context = \
canvas.getContext(\"2d\");\n  \n  //use local memory to store the canvas\n  \
env.local.ctx = context;\n\n  //get the provided data from WL\n  let array = \
await interpretate(args[0], env);\n  if (array instanceof NumericArrayObject) \
{\n    array = array.normal();\n  }\n\n  //copy by the reference to the \
instance of a frontend object\n  env.local.array = array;  \n\n  //check the \
width/height\n  const width = array.length;\n  const height = \
array[0].length;\n\n  //some helpers to determine the sizes\n  \
env.local.width = width;\n  env.local.height = height;\n\n  const sizex = \
Math.floor((300/width)-1);\n  const sizey = Math.floor((300/height)-1);\n\n  \
env.local.sizex = sizex;\n  env.local.sizey = sizey;\n\n  \
env.local.arr2screen = {x: 300.0/width, y: 300.0/height};\n\n  //animation \
function\n  //this will be executed asynchroniously\n\n  function random \
(min, max) {\n    return Math.random() * (max - min) + min;\n  }\n\n  //our \
heros\n  const particles = [];\n  \n  function animate() {\n    //randomly \
select 60 potitions from the array\n    for (let i=0; i<60; ++i) {\n      if \
(particles.length > 30*30*5) particles.shift();\n      \n      const ri = \
Math.floor(random(0, env.local.width - 1));\n      const rj = \
Math.floor(random(0, env.local.height - 1));\n      const val = \
env.local.array[ri][rj];\n\n      //create a projectile\n      \
particles.push({\n        r: 127+127*Math.sin(2048*val), \n        g: \
127+127*Math.sin(1048*val), \n        b: 0,\n        lifetime: 1,\n        x: \
ri * env.local.arr2screen.x,\n        y: rj * env.local.arr2screen.y,\n       \
 xvel: random(-1,1),\n        yvel: random(1,-1)\n      });\n    }\n\n    \
//clearscreen\n    context.fillStyle = \"white\";\n    context.fillRect(0, 0, \
300, 300);\n\n\n    //draw all projectiles\n    for (let i=0; \
i<particles.length; ++i) {\n      //age of a projectile\n      const age = \
1/particles[i].lifetime;\n\n      //draw a projectile\n      \
context.fillStyle = `rgba(${particles[i].r}, ${particles[i].g}, \
${particles[i].b}, ${age}`;\n      context.fillRect(particles[i].x + sizex/2, \
particles[i].y + sizey/2, sizex, sizey);\n      \n      //a projectile gets \
older\n      particles[i].lifetime = particles[i].lifetime + 0.2;\n\n      \
//move it a bit\n      particles[i].x = particles[i].x + \
0.1*particles[i].xvel;\n      particles[i].y = particles[i].y + \
0.1*particles[i].yvel;\n    }\n\n    //sync to the browser's frame rate\n    \
//and store the ID of a request to cancel it later if needed\n    \
env.local.uid = requestAnimationFrame(animate);\n  }\n\n  //kickstarter\n  \
requestAnimationFrame(animate);\n}\n\ncore.ArrayDraw.virtual = true;", 
    "Display" -> "codemirror", "Hash" -> 
     "7dda4285-1681-4ff3-bb35-b489079e7e71", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> False|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "ef2a4980-efc9-4205-8a1c-b287ab9da933"|>, 
   <|"Data" -> "core.ArrayDraw = async (args, env) => {\n  const canvas = \
document.createElement('canvas');\n  \n  //fixed, but one can use \
core._getRules(args, env) to derive the ImageSize option\n  canvas.width = \
300;\n  canvas.height = 300;\n  \n  //append our canvas to the provided DOM \
element\n  env.element.appendChild(canvas);\n  \n  let context = \
canvas.getContext(\"2d\");\n  \n  //use local memory to store the canvas\n  \
env.local.ctx = context;\n\n  //get the provided data from WL\n  let array = \
await interpretate(args[0], env);\n  if (array instanceof NumericArrayObject) \
{\n    array = array.normal();\n  }\n\n  //copy by the reference to the \
instance of a frontend object\n  env.local.array = array;  \n\n  //check the \
width/height\n  const width = array.length;\n  const height = \
array[0].length;\n\n  //some helpers to determine the sizes\n  \
env.local.width = width;\n  env.local.height = height;\n\n  const sizex = \
Math.floor((300/width)-1);\n  const sizey = Math.floor((300/height)-1);\n\n  \
env.local.sizex = sizex;\n  env.local.sizey = sizey;\n\n  \
env.local.arr2screen = {x: 300.0/width, y: 300.0/height};\n\n  //animation \
function\n  //this will be executed asynchroniously\n\n  function random \
(min, max) {\n    return Math.random() * (max - min) + min;\n  }\n\n  //our \
heros\n  const particles = [];\n  \n  function animate() {\n    //randomly \
select 60 potitions from the array\n    for (let i=0; i<60; ++i) {\n      if \
(particles.length > 30*30*5) particles.shift();\n      \n      const ri = \
Math.floor(random(0, env.local.width - 1));\n      const rj = \
Math.floor(random(0, env.local.height - 1));\n      const val = \
env.local.array[ri][rj];\n\n      //create a projectile\n      \
particles.push({\n        r: 127+127*Math.sin(2048*val), \n        g: \
127+127*Math.sin(1048*val), \n        b: 0,\n        lifetime: 1,\n        x: \
ri * env.local.arr2screen.x,\n        y: rj * env.local.arr2screen.y,\n       \
 xvel: random(-1,1),\n        yvel: random(1,-1)\n      });\n    }\n\n    \
//clearscreen\n    context.fillStyle = \"white\";\n    context.fillRect(0, 0, \
300, 300);\n\n\n    //draw all projectiles\n    for (let i=0; \
i<particles.length; ++i) {\n      //age of a projectile\n      const age = \
1/particles[i].lifetime;\n\n      //draw a projectile\n      \
context.fillStyle = `rgba(${particles[i].r}, ${particles[i].g}, \
${particles[i].b}, ${age}`;\n      context.fillRect(particles[i].x + sizex/2, \
particles[i].y + sizey/2, sizex, sizey);\n      \n      //a projectile gets \
older\n      particles[i].lifetime = particles[i].lifetime + 0.2;\n\n      \
//move it a bit\n      particles[i].x = particles[i].x + \
0.1*particles[i].xvel;\n      particles[i].y = particles[i].y + \
0.1*particles[i].yvel;\n    }\n\n    //sync to the browser's frame rate\n    \
//and store the ID of a request to cancel it later if needed\n    \
env.local.uid = requestAnimationFrame(animate);\n  }\n\n  //kickstarter\n  \
requestAnimationFrame(animate);\n}\n\ncore.ArrayDraw.virtual = true;", 
    "Display" -> "js", "Hash" -> "a1c180d6-4b8a-4c0e-863b-3d7af620381c", 
    "Invisible" -> False, "MetaOnly" -> False, "Props" -> <||>, 
    "State" -> "Idle", "Type" -> "Output", "UID" -> Null, 
    "Notebook" -> "ef2a4980-efc9-4205-8a1c-b287ab9da933"|>, 
   <|"Data" -> " ", "Display" -> "codemirror", 
    "Hash" -> "b5303f46-1464-420e-a866-235a44d0cb95", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> False|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "ef2a4980-efc9-4205-8a1c-b287ab9da933"|>, 
   <|"Data" -> ".md\n## Cleanning up method\nOnce you delete this widget or \
object (i dunno how to call it), __we should take care about animation \
loop__, otherwise it will continue to run in the background", 
    "Display" -> "codemirror", "Hash" -> 
     "33998ca9-1ba5-4624-bc87-36b829f586dc", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "ef2a4980-efc9-4205-8a1c-b287ab9da933"|>, 
   <|"Data" -> "\n## Cleanning up method\nOnce you delete this widget or \
object (i dunno how to call it), __we should take care about animation \
loop__, otherwise it will continue to run in the background", 
    "Display" -> "markdown", "Hash" -> 
     "415976eb-d808-477d-a388-265097f2ace6", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> False|>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "ef2a4980-efc9-4205-8a1c-b287ab9da933"|>, 
   <|"Data" -> ".js\ncore.ArrayDraw.destroy = async (args, env) => {\n  \
//remove animation loop\n  cancelAnimationFrame(env.local.uid);\n  //make \
shure that all other nested object will do the same\n  await \
interpretate(args[0], env);\n}", "Display" -> "codemirror", 
    "Hash" -> "757ec0f4-cb54-4452-baa1-ef0de5eb17a6", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> False|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "ef2a4980-efc9-4205-8a1c-b287ab9da933"|>, 
   <|"Data" -> "core.ArrayDraw.destroy = async (args, env) => {\n  //remove \
animation loop\n  cancelAnimationFrame(env.local.uid);\n  //make shure that \
all other nested object will do the same\n  await interpretate(args[0], \
env);\n}", "Display" -> "js", "Hash" -> 
     "d923ec06-f203-42b1-b4f9-2f508c6ede85", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "ef2a4980-efc9-4205-8a1c-b287ab9da933"|>, 
   <|"Data" -> ".md\nNow the second important method", 
    "Display" -> "codemirror", "Hash" -> 
     "78a54318-cb24-4a1e-b832-54d55de9f740", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "ef2a4980-efc9-4205-8a1c-b287ab9da933"|>, 
   <|"Data" -> "\nNow the second important method", "Display" -> "markdown", 
    "Hash" -> "3e06ad6b-c8b4-435e-b100-30b070f6d691", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> False|>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "ef2a4980-efc9-4205-8a1c-b287ab9da933"|>, 
   <|"Data" -> ".md\n## Update method\nWhen the dependent variables changes, \
we should update the canvas without reevaluating cells", 
    "Display" -> "codemirror", "Hash" -> 
     "57e81fbb-9220-4e24-8c4e-a378bfc64eb9", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "ef2a4980-efc9-4205-8a1c-b287ab9da933"|>, 
   <|"Data" -> "\n## Update method\nWhen the dependent variables changes, we \
should update the canvas without reevaluating cells", 
    "Display" -> "markdown", "Hash" -> 
     "4c0235e5-f376-4d56-91f9-29e19c46e0bf", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> False|>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "ef2a4980-efc9-4205-8a1c-b287ab9da933"|>, 
   <|"Data" -> ".js\ncore.ArrayDraw.update = async (args, env) => {\n  const \
innerData = env.local.innerData;\n\n  //get the provided data from WL\n  let \
array = await interpretate(args[0], env);\n  if (array instanceof \
NumericArrayObject) {\n    array = array.normal();\n  }\n  if (array.length \
!= env.local.array.length) return;\n  if (array[0].length != \
env.local.array[0].length) return;\n  env.local.array = array;\n}", 
    "Display" -> "codemirror", "Hash" -> 
     "fe54f91f-5aed-42e2-b126-bd692cd3a503", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> False|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "ef2a4980-efc9-4205-8a1c-b287ab9da933"|>, 
   <|"Data" -> "core.ArrayDraw.update = async (args, env) => {\n  const \
innerData = env.local.innerData;\n\n  //get the provided data from WL\n  let \
array = await interpretate(args[0], env);\n  if (array instanceof \
NumericArrayObject) {\n    array = array.normal();\n  }\n  if (array.length \
!= env.local.array.length) return;\n  if (array[0].length != \
env.local.array[0].length) return;\n  env.local.array = array;\n}", 
    "Display" -> "js", "Hash" -> "0f533ace-17e0-4f36-9cd5-fb052dffe358", 
    "Invisible" -> False, "MetaOnly" -> False, "Props" -> <||>, 
    "State" -> "Idle", "Type" -> "Output", "UID" -> Null, 
    "Notebook" -> "ef2a4980-efc9-4205-8a1c-b287ab9da933"|>, 
   <|"Data" -> ".md\nNow all data is stored inside the `env.local` variable, \
which is unique for each instance.\n\nThen to call it like a proper Wolfram \
Function, we need to wrap it into", "Display" -> "codemirror", 
    "Hash" -> "b2a9bd3c-270d-4693-881c-ec158eeb4f73", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "ef2a4980-efc9-4205-8a1c-b287ab9da933"|>, 
   <|"Data" -> "\nNow all data is stored inside the `env.local` variable, \
which is unique for each instance.\n\nThen to call it like a proper Wolfram \
Function, we need to wrap it into", "Display" -> "markdown", 
    "Hash" -> "62abd7ee-eb93-4904-a955-7ef5998e8cde", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> False|>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "ef2a4980-efc9-4205-8a1c-b287ab9da933"|>, 
   <|"Data" -> "gameOfLife = {224, {2, {{2, 2, 2}, {2, 1, 2}, {2, 2, 2}}}, \
{1, 1}};\nbboard = RandomInteger[1, {20, 20}];\nCreateFrontEndObject[\n  \
ArrayDraw[bboard = Last[CellularAutomaton[gameOfLife, bboard, {{0, 1}}]]]\n]"\
, "Display" -> "codemirror", "Hash" -> 
     "638905c8-b879-4498-8ac9-d9126769a4c5", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> False|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "ef2a4980-efc9-4205-8a1c-b287ab9da933"|>, 
   <|"Data" -> "(*VB[*)(FrontEndRef[\"626198af-e4dc-4b40-8660-ca52546dda1c\"]\
)(*,*)(*\"1:eJxTTMoPSmNkYGAoZgESHvk5KRCeEJBwK8rPK3HNS3GtSE0uLUlMykkNVgEKmxmZG\
VpaJKbpppqkJOuaJJkY6FqYmRnoJieaGpmamKWkJBomAwB/0RWf\"*)(*]VB*)", 
    "Display" -> "codemirror", "Hash" -> 
     "ba6363d8-f448-4b01-8500-6ca973892870", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "ef2a4980-efc9-4205-8a1c-b287ab9da933"|>, 
   <|"Data" -> "", "Display" -> "codemirror", 
    "Hash" -> "eb9eb93e-0c86-47d6-92e5-0cf58e7bd903", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> False|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "ef2a4980-efc9-4205-8a1c-b287ab9da933"|>, 
   <|"Data" -> ".md\nYou __can copy and paste__, since this is a proper \
frontend object.\n\nHowever, there is much more we need to do as well. ", 
    "Display" -> "codemirror", "Hash" -> 
     "8cdf2ae2-16c3-4539-8fd5-8563a60a1fac", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "ef2a4980-efc9-4205-8a1c-b287ab9da933"|>, 
   <|"Data" -> "\nYou __can copy and paste__, since this is a proper frontend \
object.\n\nHowever, there is much more we need to do as well. ", 
    "Display" -> "markdown", "Hash" -> 
     "9ecb154e-a425-4fd7-b9b8-733931941ae7", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> False|>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "ef2a4980-efc9-4205-8a1c-b287ab9da933"|>, 
   <|"Data" -> ".md\n### Animation", "Display" -> "codemirror", 
    "Hash" -> "a9fe023c-5628-4cc8-ac35-117050aa1384", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "ef2a4980-efc9-4205-8a1c-b287ab9da933"|>, <|"Data" -> "\n### Animation", 
    "Display" -> "markdown", "Hash" -> 
     "fc391863-5821-4bf2-b6c2-b07708c0c83e", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> False|>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "ef2a4980-efc9-4205-8a1c-b287ab9da933"|>, 
   <|"Data" -> ".md\nNow we can check the result by rewritting the update \
cycle in WL in a much shorter way", "Display" -> "codemirror", 
    "Hash" -> "e6bbfabc-e2ca-490d-816d-ec9a4be79a55", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "ef2a4980-efc9-4205-8a1c-b287ab9da933"|>, 
   <|"Data" -> "\nNow we can check the result by rewritting the update cycle \
in WL in a much shorter way", "Display" -> "markdown", 
    "Hash" -> "d8cf90e8-fd53-4883-86de-d17be3914aa6", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> False|>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "ef2a4980-efc9-4205-8a1c-b287ab9da933"|>, 
   <|"Data" -> "\ngameOfLife = {224, {2, {{2, 2, 2}, {2, 1, 2}, {2, 2, 2}}}, \
{1, 1}};\nsboard = RandomInteger[1, {20, \
20}];\nCreateFrontEndObject[ArrayDraw[sboard // Offload]]\n\nDo[\n  sboard = \
Last[CellularAutomaton[gameOfLife, sboard, {{0, 1}}]];\n  Pause[0.2];\n, {i, \
1, 30}]", "Display" -> "codemirror", 
    "Hash" -> "f30fcac9-f7a5-47ae-99de-d9a634a6c79d", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> False|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "ef2a4980-efc9-4205-8a1c-b287ab9da933"|>, 
   <|"Data" -> "(*VB[*)(FrontEndRef[\"b0641dff-d96f-4317-a329-3bd99544f69c\"]\
)(*,*)(*\"1:eJxTTMoPSmNkYGAoZgESHvk5KRCeEJBwK8rPK3HNS3GtSE0uLUlMykkNVgEKJxmYm\
RimpKXppliapemaGBua6yYaG1nqGielWFqampikmVkmAwCFFBWH\"*)(*]VB*)", 
    "Display" -> "codemirror", "Hash" -> 
     "5bd7b88c-8d98-4a03-ae9c-3e40062bedee", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "ef2a4980-efc9-4205-8a1c-b287ab9da933"|>, 
   <|"Data" -> ".md\nSo it just updates our variable `sboard` without \
thinking of redrawing the canvas", "Display" -> "codemirror", 
    "Hash" -> "a1611524-9a2f-4874-88a8-5706391770ef", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "ef2a4980-efc9-4205-8a1c-b287ab9da933"|>, 
   <|"Data" -> "\nSo it just updates our variable `sboard` without thinking \
of redrawing the canvas", "Display" -> "markdown", 
    "Hash" -> "e0fffb7d-945e-4180-98a6-f4edc2212fbc", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> False|>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "ef2a4980-efc9-4205-8a1c-b287ab9da933"|>, 
   <|"Data" -> " ", "Display" -> "codemirror", 
    "Hash" -> "208e2745-0c95-4275-8176-aa972d38d89e", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> False|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "ef2a4980-efc9-4205-8a1c-b287ab9da933"|>}, "serializer" -> "jsfn4"|>
