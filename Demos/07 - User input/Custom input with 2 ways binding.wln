<|"Notebook" -> <|"Controller" -> "d88d6547-9509-42de-95b2-96d46f40607a", 
   "FocusedCell" -> CellObj[JerryI`Notebook`CellObj`$61], 
   "HaveToSaveAs" -> True, "MessangerChannel" -> Messanger, 
   "ModalsChannel" -> "1ed1e7d5-ddea-42e4-91d6-dc4480e70197", 
   "Objects" -> <|"6dc85a6f-0804-422b-b99a-dcbe7d681ec3" -> 
      <|"Public" -> Hold[HTMLView["<div class=\"mt-2 flex\"><div \
style=\"width: 7rem\" class=\"flex shrink-0 items-center rounded-l-md \
bg-white px-3 text-base text-gray-500 outline outline-1 -outline-offset-1 \
outline-gray-300 sm:text-sm/6\">x</div><input type=\"number\" step=\"1\" \
class=\"-ml-px block w-full grow rounded-r-md bg-white px-3 py-1.5 text-base \
text-gray-900 outline outline-1 -outline-offset-1 outline-gray-300 \
placeholder:text-gray-400 focus:outline focus:outline-2 \
focus:-outline-offset-2 focus:outline-indigo-600 sm:text-sm/6\" \
placeholder=\"0.0\"/><script type=\"module\"> core['Handler$309271'] = async \
(args, env) => {\n        const input = \
env.element.getElementsByTagName('input')[0];\n\n\n        const data = await \
interpretate(args[0], env);\n        input.value = +data.toFixed(4);\n        \
env.local.input = input;\n\n        input.addEventListener('change', () => \
{\n          \n          console.warn(input.value);\n          env.local.skip \
= true;\n          \
server.kernel.emitt('1ff75aee-2daa-4af2-a3a2-553baa50571e', input.value, \
'x');\n        });        \n      }\n\n      core['Handler$309271'].update = \
async (args, env) => {\n        if (env.local.skip) {\n          \
env.local.skip = false;\n          return;\n        }\n        \n        \
console.log('Update');\n        env.local.input.value = +(await \
interpretate(args[0], env)).toFixed(4);\n      }\n\n      \
core['Handler$309271'].destroy = () => {\n        delete \
core['Handler$309271'];\n      }\n\n      core['Handler$309271'].virtual = \
true;</script></div>", Epilog -> Handler$309271[Offload[values[[1]]]]]]|>, 
     "feedea1e-aa0e-4be7-b796-6f9c2f5e2f13" -> 
      <|"Public" -> Hold[HTMLView["<div class=\"mt-2 flex\"><div \
style=\"width: 7rem\" class=\"flex shrink-0 items-center rounded-l-md \
bg-white px-3 text-base text-gray-500 outline outline-1 -outline-offset-1 \
outline-gray-300 sm:text-sm/6\">x<sup>2</sup></div><input type=\"number\" \
step=\"1\" class=\"-ml-px block w-full grow rounded-r-md bg-white px-3 py-1.5 \
text-base text-gray-900 outline outline-1 -outline-offset-1 outline-gray-300 \
placeholder:text-gray-400 focus:outline focus:outline-2 \
focus:-outline-offset-2 focus:outline-indigo-600 sm:text-sm/6\" \
placeholder=\"0.0\"/><script type=\"module\"> core['Handler$309272'] = async \
(args, env) => {\n        const input = \
env.element.getElementsByTagName('input')[0];\n\n\n        const data = await \
interpretate(args[0], env);\n        input.value = +data.toFixed(4);\n        \
env.local.input = input;\n\n        input.addEventListener('change', () => \
{\n          \n          console.warn(input.value);\n          env.local.skip \
= true;\n          \
server.kernel.emitt('1ff75aee-2daa-4af2-a3a2-553baa50571e', input.value, \
'x2');\n        });        \n      }\n\n      core['Handler$309272'].update = \
async (args, env) => {\n        if (env.local.skip) {\n          \
env.local.skip = false;\n          return;\n        }\n        \n        \
console.log('Update');\n        env.local.input.value = +(await \
interpretate(args[0], env)).toFixed(4);\n      }\n\n      \
core['Handler$309272'].destroy = () => {\n        delete \
core['Handler$309272'];\n      }\n\n      core['Handler$309272'].virtual = \
true;</script></div>", Epilog -> Handler$309272[Offload[values[[2]]]]]]|>|>, 
   "Path" -> "/Users/kirill/Github/Custom input with 2 ways binding.wln", 
   "Quick" -> True, "Symbols" -> <|"values" -> JSObject[(-3)[9]]|>, 
   "TOC" -> {Notebook`Editor`TOC`Private`heading[2, "WLX & 2 ways binding", 
      CellObj[JerryI`Notebook`CellObj`$81]]}|>, 
 "Cells" -> {<|"Data" -> ".md\n## WLX & 2 ways binding\n\nIt is also possible \
to combine your custom input element with traditional dynamics. For instance \
you want to create multiple input fields, which are synchronised  with each \
other or using some equation. \n\nTherefore you need a WLJS Function with \
`update` methods defined. One can generate those on-fly for each input \
element within a WLX script", "Display" -> "codemirror", 
    "Hash" -> "330a5c23-8268-4595-8044-df34066e998b", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "55ca4726-7c16-4907-8ab3-18350f7e4a8d"|>, 
   <|"Data" -> "## WLX & 2 ways binding\n\nIt is also possible to combine \
your custom input element with traditional dynamics. For instance you want to \
create multiple input fields, which are synchronised  with each other or \
using some equation. \n\nTherefore you need a WLJS Function with `update` \
methods defined. One can generate those on-fly for each input element within \
a WLX script", "Display" -> "markdown", 
    "Hash" -> "ccc16225-bf24-4ec4-9c6e-4b0b4bb8c647", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "55ca4726-7c16-4907-8ab3-18350f7e4a8d"|>, 
   <|"Data" -> ".wlx\n\nCustomInput[sym_, OptionsPattern[]] := Module[{\n  \
Label = OptionValue[\"Label\"],\n  Ev = OptionValue[\"Event\"],\n  Pattern = \
OptionValue[\"Pattern\"],\n  Handler\n},\n\n  With[{Template = \n    <div \
class=\"mt-2 flex\">\n      <div style=\"width: 7rem\" class=\"flex shrink-0 \
items-center rounded-l-md bg-white px-3 text-base text-gray-500 outline \
outline-1 -outline-offset-1 outline-gray-300 sm:text-sm/6\"><Label/></div>\n  \
    <input type=\"number\" step=\"1\" class=\"-ml-px block w-full grow \
rounded-r-md bg-white px-3 py-1.5 text-base text-gray-900 outline outline-1 \
-outline-offset-1 outline-gray-300 placeholder:text-gray-400 focus:outline \
focus:outline-2 focus:-outline-offset-2 focus:outline-indigo-600 \
sm:text-sm/6\" placeholder=\"0.0\"/>\n    <script type=\"module\">\n      \
core['<Handler/>'] = async (args, env) => {\n        const input = \
env.element.getElementsByTagName('input')[0];\n\n\n        const data = await \
interpretate(args[0], env);\n        input.value = +data.toFixed(4);\n        \
env.local.input = input;\n\n        input.addEventListener('change', () => \
{\n          \n          console.warn(input.value);\n          env.local.skip \
= true;\n          server.kernel.emitt('<Ev/>', input.value, '<Pattern/>');\n \
       });        \n      }\n\n      core['<Handler/>'].update = async (args, \
env) => {\n        if (env.local.skip) {\n          env.local.skip = false;\n \
         return;\n        }\n        \n        console.log('Update');\n       \
 env.local.input.value = +(await interpretate(args[0], env)).toFixed(4);\n    \
  }\n\n      core['<Handler/>'].destroy = () => {\n        delete \
core['<Handler/>'];\n      }\n\n      core['<Handler/>'].virtual = true;\n    \
</script>\n  </div>\n  },\n    HTMLView[Template, Epilog->(Handler[sym])]\n  \
]\n]\n\nOptions[CustomInput] = {\"Label\"->\"\", \"Event\"->\"\", \
\"Pattern\"->\"Default\"};", "Display" -> "codemirror", 
    "Hash" -> "40007f36-957f-4a14-885e-3f7984b451cc", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "55ca4726-7c16-4907-8ab3-18350f7e4a8d"|>, 
   <|"Data" -> ".md\n\nwhat happens here:\n\n1. we define a template for our \
custom input field\n2. we define a support script with a generated `Handler` \
function, which reads and updates this input field\n3. we pack in into \
`HTMLView`, which calls our `Handler` on a provided argument after this \
component has been mounted\n\nLet's see it in action", 
    "Display" -> "codemirror", "Hash" -> 
     "2554f488-9095-4d12-b2a9-88a0746a93b8", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "55ca4726-7c16-4907-8ab3-18350f7e4a8d"|>, 
   <|"Data" -> "\nwhat happens here:\n\n1. we define a template for our \
custom input field\n2. we define a support script with a generated `Handler` \
function, which reads and updates this input field\n3. we pack in into \
`HTMLView`, which calls our `Handler` on a provided argument after this \
component has been mounted\n\nLet's see it in action", 
    "Display" -> "markdown", "Hash" -> 
     "a00196f9-ea1a-498d-bd5a-89cafae953e2", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "55ca4726-7c16-4907-8ab3-18350f7e4a8d"|>, 
   <|"Data" -> "values = {1,1};\n\nevent = \
CreateUUID[];\n\nEventHandler[event, {\n  \"x\" -> Function[val,\n    values \
= {val, (*SpB[*)Power[val(*|*),(*|*)2](*]SpB*)} // N // Re;\n  ],\n\n  \"x2\" \
-> Function[val,\n    values = {(*SqB[*)Sqrt[val](*]SqB*), val} // N // Re;\n \
 ]\n}];\n\n{\n  CustomInput[values[[1]] // Offload, \"Event\"->event, \
\"Pattern\"->\"x\", \"Label\"->\"x\"],\n  CustomInput[values[[2]] // Offload, \
\"Event\"->event, \"Pattern\"->\"x2\", \"Label\"->\"x<sup>2</sup>\"]\n} // \
Column", "Display" -> "codemirror", 
    "Hash" -> "d46a3b13-17da-41d8-adc4-797a8e078bb3", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "55ca4726-7c16-4907-8ab3-18350f7e4a8d"|>, 
   <|"Data" -> "(*GB[*){{(*VB[*)(FrontEndRef[\"6dc85a6f-0804-422b-b99a-dcbe7d\
681ec3\"])(*,*)(*\"1:eJxTTMoPSmNkYGAoZgESHvk5KRCeEJBwK8rPK3HNS3GtSE0uLUlMykkN\
VgEKm6UkW5gmmqXpGlgYmOiaGBkl6SZZWibqpiQnpZqnmFkYpiYbAwCHZBYI\"*)(*]VB*)}(*||*\
),(*||*){(*VB[*)(FrontEndRef[\"feedea1e-aa0e-4be7-b796-6f9c2f5e2f13\"])(*,*)(\
*\"1:eJxTTMoPSmNkYGAoZgESHvk5KRCeEJBwK8rPK3HNS3GtSE0uLUlMykkNVgEKp6WmpqQmGqbq\
JiYapOqaJKWa6yaZW5rpmqVZJhulmaYapRkaAwCmYxbK\"*)(*]VB*)}}(*]GB*)", 
    "Display" -> "codemirror", "Hash" -> 
     "82e53b40-f4ab-4f30-ad55-8ce9cc4e7717", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "55ca4726-7c16-4907-8ab3-18350f7e4a8d"|>}, "serializer" -> "jsfn4"|>
